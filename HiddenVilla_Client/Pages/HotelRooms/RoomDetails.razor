@page "/hotel/room-details/{Id:int}"
@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject IHotelRoomService hotelRoomService
@inject IStripePaymentService stripePaymentService
@inject IRoomOrderDetailsService roomOrderDetailsService

@if(HotelBooking?.OrderDetails?.HotelRoomDTO?.HotelRoomImages == null)
{
    <div class="spinner"></div>
}
else
{

<div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

    <div class="row p-2 my-3 " style="border-radius:20px; ">
        <div class="col-12 col-lg-7 p-4" style="border: 1px solid #fff">
            <div class="row px-2 text-success border-bottom">
                <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Selected Room</p></div>
                <div class="col-4 p-0"><a href="hotel/rooms" class="btn btn-secondary btn-block">Back to Room's</a></div>
            </div>

            <div class="row">
                <div class="col-6">
                    <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                            <ol class="carousel-indicators">
                                <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                                <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                            </ol>
                            <div class="carousel-inner">
                                <div class="carousel-item active">
                                    <img class="d-block w-100" src="images/slide1.jpg" alt="First slide">
                                </div>
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <span class="float-right pt-4">
                        <span class="float-right">Max Occupancy : @HotelBooking.OrderDetails.HotelRoomDTO.Occupancy adults </span><br />
                        <span class="float-right pt-1">Villa Size : @HotelBooking.OrderDetails.HotelRoomDTO.SqFt sqft</span><br />
                        <h4 class="text-warning font-weight-bold pt-5 pl-5">USD 
                            <span style="border-bottom:1px solid #ff6a00">
                                @HotelBooking.OrderDetails.HotelRoomDTO.TotalAmount.ToString("#,#.00#;(#,#.00#)")
                            </span>
                        </h4>
                        <span class="float-right">Cost for @HotelBooking.OrderDetails.HotelRoomDTO.TotalDays nights</span>
                    </span>
                </div>
            </div>
            <div class="row p-2">
                <div class="col-12">
                    <p class="card-title text-warning" style="font-size:xx-large">@HotelBooking.OrderDetails.HotelRoomDTO.Name</p>
                    <p class="card-text" style="font-size:large">
                        @((MarkupString)@HotelBooking.OrderDetails.HotelRoomDTO.Details)
                    </p>
                </div>

            </div>
        </div>

        <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
            <EditForm Model="HotelBooking" class="container" OnValidSubmit="HandleCheckout">
                

                <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

                <div class="form-group pt-2">
                    <label class="text-warning">Name</label>
                    <InputText @bind-Value="HotelBooking.OrderDetails.Name" type="text" class="form-control" />
                    @*<ValidationMessage For="(() => HotelBooking.OrderDetails.Name)" />*@
                </div>
                <div class="form-group pt-2">
                    <label class="text-warning">Phone</label>
                    <InputText @bind-Value="HotelBooking.OrderDetails.Phone" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Email</label>
                    <InputText @bind-Value="HotelBooking.OrderDetails.Email" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Check in Date</label>
                    <InputDate @bind-Value="HotelBooking.OrderDetails.CheckInDate" type="date" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Check Out Date</label>
                    <InputDate @bind-Value="HotelBooking.OrderDetails.CheckOutDate" type="date" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">No. of nights</label>
                    <select class="form-control" value="@NoOfNights" @onchange="HandleNoOfNightsChange">
                        @for (var i = 1; i <= 10; i++)
                        {
                            if (i == NoOfNights)
                            {
                                <option value="@i" selected="selected">@i</option>
                            }
                            else
                            {
                                <option value="@i">@i</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

}

@code {
    [Parameter]
    public int? Id { get; set; }

    public HotelRoomBookingVM HotelBooking { get; set; } = new HotelRoomBookingVM();

    private int NoOfNights { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //await Task.Delay(5000);

            HotelBooking.OrderDetails = new RoomOrderDetailsDTO();

            if (Id != null)
            {
                if (await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking) != null)
                {
                    var roomInitialInfo = await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking);

                    HotelBooking.OrderDetails.HotelRoomDTO = await hotelRoomService.GetHotelRoomDetails(Id.Value,
                    roomInitialInfo.StartDate.ToString("MM/dd/yyyy"), roomInitialInfo.EndDate.ToString("MM/dd/yyyy"));

                    NoOfNights = roomInitialInfo.NoOfNights;
                    HotelBooking.OrderDetails.CheckInDate = roomInitialInfo.StartDate;
                    HotelBooking.OrderDetails.CheckOutDate = roomInitialInfo.EndDate;
                    HotelBooking.OrderDetails.HotelRoomDTO.TotalDays = roomInitialInfo.NoOfNights;
                    HotelBooking.OrderDetails.HotelRoomDTO.TotalAmount =
                        roomInitialInfo.NoOfNights * HotelBooking.OrderDetails.HotelRoomDTO.RegularRate;
                }
                else
                {
                    HotelBooking.OrderDetails.HotelRoomDTO = await hotelRoomService.GetHotelRoomDetails(Id.Value,
                        DateTime.Now.ToString("MM/dd/yyyy"), DateTime.Now.AddDays(1).ToString("MM/dd/yyyy"));

                    NoOfNights = 1;
                    HotelBooking.OrderDetails.CheckInDate = DateTime.Now;
                    HotelBooking.OrderDetails.CheckOutDate = DateTime.Now.AddDays(1);
                    HotelBooking.OrderDetails.HotelRoomDTO.TotalDays = 1;
                    HotelBooking.OrderDetails.HotelRoomDTO.TotalAmount =
                        HotelBooking.OrderDetails.HotelRoomDTO.RegularRate;
                }
            }
        }
        catch (Exception e)
        {

            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task HandleNoOfNightsChange(ChangeEventArgs e)
    {
        NoOfNights = Convert.ToInt32(e.Value.ToString());

        HotelBooking.OrderDetails.HotelRoomDTO = await hotelRoomService.GetHotelRoomDetails(Id.Value,
        HotelBooking.OrderDetails.CheckInDate.ToString("MM/dd/yyyy"),
        HotelBooking.OrderDetails.CheckInDate.AddDays(NoOfNights).ToString("MM/dd/yyyy"));

        HotelBooking.OrderDetails.CheckOutDate = HotelBooking.OrderDetails.CheckInDate.AddDays(NoOfNights);
        HotelBooking.OrderDetails.HotelRoomDTO.TotalDays = NoOfNights;
        HotelBooking.OrderDetails.HotelRoomDTO.TotalAmount = NoOfNights * HotelBooking.OrderDetails.HotelRoomDTO.RegularRate;
    }

    private async Task HandleCheckout()
    {
        if(!await HandleValidation())
        {
            return;
        }

        try
        {
            var paymentDTO = new StripePaymentDTO()
            {
                Amount = Convert.ToInt32(HotelBooking.OrderDetails.HotelRoomDTO.TotalAmount * 100),
                ProductName = HotelBooking.OrderDetails.HotelRoomDTO.Name,
                ReturnUrl = "/hotel/room-details/" + Id
            };

            var result = await stripePaymentService.CheckOut(paymentDTO);

            HotelBooking.OrderDetails.StripeSessionId = result.Data.ToString();
            HotelBooking.OrderDetails.RoomId = HotelBooking.OrderDetails.HotelRoomDTO.Id;
            HotelBooking.OrderDetails.TotalCost = HotelBooking.OrderDetails.HotelRoomDTO.TotalAmount;

            var roomOrderDetailsServiceSaved = await roomOrderDetailsService.SaveRoomOrderDetails(HotelBooking.OrderDetails);

            await localStorage.SetItemAsync(SD.Local_RoomOrderDetails, roomOrderDetailsServiceSaved);

        }
        catch (Exception e)
        {

            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task<bool> HandleValidation()
    {
        if (string.IsNullOrEmpty(HotelBooking.OrderDetails.Name))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(HotelBooking.OrderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(HotelBooking.OrderDetails.Email))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;
    }
}
